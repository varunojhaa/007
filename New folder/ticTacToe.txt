
board = {1:' ', 2:' ', 3:' ',
        4:' ', 5:' ', 6:' ',
        7:' ', 8:' ', 9:' '}

def printBoard():
  print(board[1]+'|' + board[2]+'|' + board[3])
  print('-+-+-')
  print(board[4]+'|' + board[5]+'|' + board[6])
  print('-+-+-')
  print(board[7]+'|' + board[8]+'|' + board[9])
  print("\n")

# printBoard()



def isPositionFree(position):
  if (board[position] == ' '):
    return True
  else:
    print("Poistion is not free")
    return False

1
def checkForDraw():
  for keys in board.keys():
    if(board[keys]==' '):
      return False

  return True

def checkForWin():
  if (board[1]==board[2] and board[1]==board[3] and board[1]!= ' '):
    return True
  elif (board[4]==board[5] and board[4]==board[6] and board[4]!= ' '):
    return True
  elif (board[7]==board[8] and board[7]==board[9] and board[7]!= ' '):
    return True
  elif (board[1]==board[4] and board[1]==board[7] and board[1]!= ' '):
    return True
  elif (board[2]==board[5] and board[2]==board[8] and board[2]!= ' '):
    return True
  elif (board[3]==board[6] and board[3]==board[9] and board[3]!= ' '):
    return True
  elif (board[1]==board[5] and board[1]==board[9] and board[1]!= ' '):
    return True
  elif (board[7]==board[5] and board[7]==board[3] and board[7]!= ' '):
    return True
  else:
    return False

def checkWhichMarkWon(mark):
    if board[1] == board[2] and board[1] == board[3] and board[1] == mark:
        return True
    elif (board[4] == board[5] and board[4] == board[6] and board[4] == mark):
        return True
    elif (board[7] == board[8] and board[7] == board[9] and board[7] == mark):
        return True
    elif (board[1] == board[4] and board[1] == board[7] and board[1] == mark):
        return True
    elif (board[2] == board[5] and board[2] == board[8] and board[2] == mark):
        return True
    elif (board[3] == board[6] and board[3] == board[9] and board[3] == mark):
        return True
    elif (board[1] == board[5] and board[1] == board[9] and board[1] == mark):
        return True
    elif (board[7] == board[5] and board[7] == board[3] and board[7] == mark):
        return True
    else:
        return False


def insertLetter(letter, position):

  if (isPositionFree(position)):
    board[position]= letter
    printBoard()
    if (checkForDraw()):
      print("Draw!")
      exit()
    
    if (checkForWin()):
      if (letter=='X'):
        print("Bot Wins!")
      
      elif (letter=='0'):
        print('Player Wins:)')

      exit()
  
  else:
    print("Sorry can't print there")
    newPosition = int(input("Enter an empty position: "))
    insertLetter(letter, newPosition)

  
def playerMove():
  location = int(input("Enter a postion for '0': "))
  insertLetter(player, location)
  return

def compMove():
    bestScore = -1
    bestMove = 0
    for key in board.keys():
        if (board[key] == ' '):
            board[key] = comp
            score = minimax(board, 0, False)
            board[key] = ' '
            if (score > bestScore):
                bestScore = score
                bestMove = key

    insertLetter(comp, bestMove)
    return


def minimax(board, depth, isMaximizing):
    if (checkWhichMarkWon(comp)):
        return 1
    elif (checkWhichMarkWon(player)):
        return -1
    elif (checkForDraw()):
        return 0

    if (isMaximizing):
        bestScore = -1
        for key in board.keys():
            if (board[key] == ' '):
                board[key] = comp
                score = minimax(board, depth + 1, False)
                board[key] = ' '
                if (score > bestScore):
                    bestScore = score
        return bestScore

    else:
        bestScore = 1
        for key in board.keys():
            if (board[key] == ' '):
                board[key] = player
                score = minimax(board, depth + 1, True)
                board[key] = ' '
                if (score < bestScore):
                    bestScore = score
        return bestScore

comp = "X"
player = "0"

while checkForWin()==False:
  compMove()
  playerMove()

